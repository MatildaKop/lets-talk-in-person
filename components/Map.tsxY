'use client'

import { useEffect, useRef, useState, useCallback } from 'react'
import { User } from '@/lib/mockData'
import { AlertCircle } from 'lucide-react'

interface MapProps {
  currentUser: User
  activeUsers: User[]
  onStartConversation: (userId: string) => void
}

declare global {
  interface Window {
    initMap: () => void;
    google: typeof google;
  }
}

export default function Map({ currentUser, activeUsers, onStartConversation }: MapProps) {
  const mapRef = useRef<HTMLDivElement>(null)
  const [error, setError] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [mapInstance, setMapInstance] = useState<google.maps.Map | null>(null)
  const markersRef = useRef<google.maps.Marker[]>([])

  const clearMarkers = useCallback(() => {
    markersRef.current.forEach(marker => marker.setMap(null))
    markersRef.current = []
  }, [])

  const initMap = useCallback(() => {
    if (!mapRef.current || !window.google) return

    const map = new window.google.maps.Map(mapRef.current, {
      center: { lat: currentUser.latitude, lng: currentUser.longitude },
      zoom: 15,
      styles: [
        {
          featureType: 'poi',
          elementType: 'labels',
          stylers: [{ visibility: 'off' }]
        }
      ],
      mapTypeControl: false,
      streetViewControl: false,
      fullscreenControl: false
    })

    setMapInstance(map)

    clearMarkers()

    activeUsers.forEach(user => {
      const marker = new google.maps.Marker({
        position: { lat: user.latitude, lng: user.longitude },
        map,
        title: user.username,
        icon: {
          path: google.maps.SymbolPath.CIRCLE,
          scale: 8,
          fillColor: user.id === currentUser.id ? '#4a90e2' : '#c30b82',
          fillOpacity: 1,
          strokeWeight: 2,
          strokeColor: '#ffffff'
        }
      })

      const infoWindow = new google.maps.InfoWindow({
        content: `<div><strong>${user.username}</strong></div>`
      })

      marker.addListener('click', () => {
        infoWindow.open(map, marker)
        if (user.id !== currentUser.id) {
          onStartConversation(user.id)
        }
      })

      markersRef.current.push(marker)
    })

    setIsLoading(false)
  }, [currentUser, activeUsers, onStartConversation, clearMarkers])

  useEffect(() => {
    if (!process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY) {
      setError('Google Maps API key is not configured')
      setIsLoading(false)
      return
    }

    if (typeof window !== 'undefined' && !window.google) {
      window.initMap = initMap
      const script = document.createElement('script')
      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&callback=initMap`
      script.async = true
      script.defer = true
      script.onerror = () => {
        setError('Failed to load Google Maps script')
        setIsLoading(false)
      }
      document.head.appendChild(script)
    } else if (window.google) {
      initMap()
    }

    return () => {
      clearMarkers()
      if (mapInstance) {
        setMapInstance(null)
      }
    }
  }, [initMap, mapInstance, clearMarkers])

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-[400px] bg-gray-100 rounded-lg p-4">
        <div className="text-center">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <p className="text-red-500 font-medium mb-2">{error}</p>
          <p className="text-sm text-gray-600">
            Please check your Google Maps API configuration in the environment variables.
          </p>
        </div>
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center h-[400px] bg-gray-100 rounded-lg p-4">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4" />
          <p className="text-gray-600">Loading map...</p>
        </div>
      </div>
    )
  }

  return <div ref={mapRef} className="w-full h-[400px] rounded-lg shadow-md" />
}
